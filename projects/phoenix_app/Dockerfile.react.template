FROM $BUILDER_IMAGE as builder

# install build dependencies
RUN apt-get update -y && apt-get install -y build-essential git \
    && apt-get clean && rm -f /var/lib/apt/lists/*_*

# prepare build dir
WORKDIR /app

# install hex + rebar
RUN mix local.hex --force && \
    mix local.rebar --force

# set build ENV
ENV MIX_ENV="prod"

# install mix dependencies
COPY ./$APP_NAME/mix.exs ./$APP_NAME/mix.lock ./
RUN mix deps.get --only $MIX_ENV
RUN mkdir config

# copy compile-time config files before we compile dependencies
# to ensure any relevant config change will trigger the dependencies
# to be re-compiled.
COPY ./$APP_NAME/config/config.exs ./$APP_NAME/config/$MIX_ENV.exs config/
RUN mix deps.compile

COPY ./$APP_NAME/priv priv

COPY ./$APP_NAME/lib lib

COPY ./$APP_NAME/rel rel

# Compile the release
RUN mix compile

# Changes to config/runtime.exs don't require recompiling the code
COPY ./$APP_NAME/config/runtime.exs config/

RUN mix release

# start a new build stage so that the final image will only contain
# the compiled release and other runtime necessities
FROM $RUNNER_IMAGE

RUN apt-get update -y && apt-get install -y libstdc++6 openssl libncurses5 locales \
  && apt-get clean && rm -f /var/lib/apt/lists/*_*

# Set the locale
RUN sed -i '/en_US.UTF-8/s/^# //g' /etc/locale.gen && locale-gen

ENV LANG en_US.UTF-8
ENV LANGUAGE en_US:en
ENV LC_ALL en_US.UTF-8

WORKDIR "/app"
RUN chown nobody /app

# set runner ENV
ENV MIX_ENV="prod"

# Only copy the final release from the build stage
COPY --from=builder --chown=nobody:root /app/_build/$MIX_ENV/rel/$APP_NAME ./

USER nobody

EXPOSE $PORT
CMD ["/app/bin/server"]
